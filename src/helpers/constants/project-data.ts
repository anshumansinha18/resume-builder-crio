import { IProjectContent } from "./index.interface"

export const trackOptions:string[] = ["fdt", "qa", "bdt"];

export const projectOptions: IProjectContent[]= [
    {
      "id": "qeats",
      "name": "QEats",
      "languages": "Java, REST, Spring Boot, MongoDB, Redis, JUnit, Mockito, MVCS, Spring Data, Multithreading",
      "demoLink": "https://github.com/apoorvb12/qeats",
      "timeline": "2012-01-01",
      "intro": "QEats is a food ordering app that allows users to browse and order their favourite dishes from nearby restaurants.",
      "description": "",
      "track": "bdt"
    },
    {
      "id": "qmoney",
      "name": "QMoney",
      "languages": "Java, Jackson, Factory Design Pattern, JUnit, Mockito, REST",
      "demoLink": "https://github.com/apoorvb12/qeats",
      "timeline": "2012-01-01",
      "intro": "QMoney is a visual stock portfolio analyzer. It helps portfolio managers make trade recommendations for their clients.",
       "description":"",
       "track": "bdt"
    },
    {
      "id": "xform",
      "name": "XForm",
      "languages": "Java, Spring Boot, MongoDB, Spring Data",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
       "description":"",
       "track": "bdt"
    },
    {
      "id": "xcommerce",
      "name": "XCommerce",
      "languages": "Java, Jackson, JUnit",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
       "description":"",
       "track": "bdt",
    },
    {
      "id": "xflix",
      "name": "XFlix",
      "languages": "React.js, JSX, Figma, Mock API server, Single Page Application, NPM, Netlify, JSX",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
       "description":"<ul><li>Xflix is a video-sharing platform built using React.js that hosts videos for the world to watch.</li><li>Implemented the complete set of REST APIs following the 3-level architecture of controller-service-database using Node.js, Express.js, and Mongoose ODM to communicate with MongoDB.</li><li>It also features uploading new videos by using external video links (e.g. YouTube) and playing these videos.</li><li>A user can Filter and Search the videos according to the genre, and age, and also can be sorted using views and release dates.</li></ul>",
       "track": "fdt",
    },
    {
      "id": "qkart",
      "name": "Qkart",
      "languages": "React.js, JSX, Single Page Application, NPM, Reusable Components, Debouncing, Conditional Rendering, React Router, LocalStorage API, Password-based Authentication, Bearer Token, React Refs, Ant Design, Netlify, Heroku, Render",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
       "description":"<ul><li>MERN stack E-commerce application offers a variety of products for customers.</li><li>Implemented features including User registration, JWT-token-based authentication, cart functionality, and secure checkout.</li><li>Improved UI by adding responsive design elements for a uniform experience across different devices using Material UI.</li><li>Built the complete set of REST APIs for an E-commerce application following the best practices.</li><li>Deployed the Frontend to Netlify, Backend to Render, and the Database to MongoDB Atlas.</li></ul>",
       "track": "fdt",
    },
    {
      "id": "xboard",
      "name": "XBoard",
      "languages": "JavaScript,  HTML5, CSS3, Bootstrap, Figma, DOM Manipulation, Netlify",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
       "description":"<ul><li>Created a web page application using HTML, CSS, Bootstrap, and JavaScript.</li><li>Used accordion, carousel, and card components from Bootstrap and customized them as per the application requirement.</li><li>Invoked API to fetch data from Flipboard's RSS Feed and integrate that into the web page to show news articles.</li><li>Replicated desktop and mobile views with reference to the Figma Design and deployed the dynamic webpage to Netlify.</li></ul>",
       "track": "fdt",
    },
    {
      "id": "qtrip",
      "name": "Qtrip",
      "languages": "JavaScript, HTML5, CSS3, Bootstrap, Wireframe, Dynamic webpage, DOM Manipulation, Netlify, Render",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
      "description":"<ul><li>A travel website made using HTML, CSS, Bootstrap, and JavaScript that can be used to browse different cities, and adventures and make reservations.</li><li>Improved UI/UX with multi-select filters, forms, image carousels, and conditional rendering of page elements.</li><li>Utilized localStorage to persist user preference at client-side and facilitated reservation form submission using fetch API.</li><li>Deployed the website using Netlify for Frontend and Render for Backend.</li></ul>",
       "track": "fdt",
    },
    {
      "id": "qcalc",
      "name": "QCalc",
      "languages": "Java, OOPs, IDE, Debugger, JUnit, Exception Handling",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
      "description":"",
       "track": "qa",
    },
    {
      "id": "qkart",
      "name": "QKart",
      "languages": "Selenium, Web Driver, TestNG, Apache POI, Cucumber, Page Object Model, Grid, Web Driver Manager, XPath, Extent Report, Apache Log4J",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
       "description":"",
       "track": "qa",
    },
    {
      "id": "qtripstatic",
      "name": "Qtrip-Static",
      "languages": "HTML, CSS, Developer Tools, Bootstrap, Responsive Design, Deployment using Netlify, VS Code Live Server",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
      "description":"<ul><li>Created 3 different web pages from wireframe layout using HTML and CSS.</li><li>Utilized Bootstrap extensively for responsive design, and creating components.</li><li>Deployed the website using Netlify.</li></ul>",
      "track": "fdt",
    },
    {
      "id": "qtripdynamic",
      "name": "Qtrip-Dynamic",
      "languages": "HTML, CSS, JavaScript, HTTP, REST, DOM Manipulation, Event Handling, Deployment using Render, cURL, JSON",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
      "description":"<ul><li>Constructed web pages using HTML, CSS, Bootstrap, and JavaScript.</li><li>Improved UI/UX of the website with multi-select filters, image carousels, and conditional rendering of page elements.</li><li>Utilized localStorage to persist user preference at client-side and facilitated reservation form submission using fetch API.</li><li>Deployed the website using Netlify for Frontend and Render for Backend.</li></ul>",
      "track": "fdt",
    },
    {
      "id": "qkartfrontend",
      "name": "Qkart-Frontend",
      "languages": "Debouncing, localStorage, React Hooks, Error Handling, ES6, Conditional Rendering, React, Material UI, Keyword Search",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
      "description":"<ul><li>Built a single web page app using React and utilized REST APIs for dynamic data-loading and rendering.</li><li>Implemented the core logic for authentication, shopping cart, and checkout.</li><li>Improved UI by adding responsive design elements for a uniform experience across different devices using Material UI.</li><li>Optimized the search feature using Debouncing.</li><li>Facilitated CRUD operations on the client side to select, add, and delete addresses for delivery.</li><li>Used React Router library to set up routes redirecting customers to appropriate pages and deployed the app using Netlify</li></ul>",
      "track": "fdt",
    },
    {
      "id": "qkartbackend",
      "name": "Qkart-Backend",
      "languages": "Hashing, JWT Token, Mongoose ODM, Postman, Express JS, Node JS, Mongo DB, Test Driven Development, Unit testing, Jest framework, MongoDB Atlas, REST APIs, CRUD Operations, Three layer Architecture (Route-Controller-Services), JOI Validation",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
      "description":"<ul><li>Built a single web page app using React and utilized REST APIs for dynamic data-loading and rendering.</li><li>Implemented the core logic for authentication, shopping cart, and checkout.</li><li>Improved UI by adding responsive design elements for a uniform experience across different devices using Material UI.</li><li>Optimized the search feature using Debouncing.</li><li>Facilitated CRUD operations on the client side to select, add, and delete addresses for delivery.</li><li>Used React Router library to set up routes redirecting customers to appropriate pages and deployed the app using Netlify</li></ul>",
      "track": "fdt",
    },
    {
      "id": "xflixfrontend",
      "name": "Xflix-Frontend",
      "languages": "React Hooks, React Router, Material UI, React, Figma, ES6, Controlled Components",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
      "description":"<ul><li>Xflix is a video-sharing platform built using React.js that hosts videos for the world to watch.</li><li>Mocked backend server using Postman Mock Server for API response and deployed the frontend to Netlify.</li><li>A user can Filter and Search the videos according to the genre, and age, and also can be sorted using views and release dates.</li><li>It also features uploading new videos by using external video links (e.g. YouTube) and playing these videos.</li></ul>",
      "track": "fdt",
    },
    {
      "id": "xflixbackend",
      "name": "Xflix-Backend",
      "languages": "Mongoose ODM, Node JS, Express JS, Mongo DB, REST, Postman, Deployment using Render, REST APIs, CRUD Operations, Three layer Architecture (Route-Controller-Services), JOI Validation",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
      "description":"<ul><li>Implemented the complete set of REST APIs following the 3-level architecture of controller-service-database using Node.js, Express.js, and Mongoose ODM to communicate with MongoDB.</li></ul>",
      "track": "fdt",
    },
    {
      "id": "qtify",
      "name": "Qtify",
      "languages": "HTML, Bootstrap, React, React Routing, Material UI, Swiper Carousel",
      "demoLink": "",
      "timeline": "2012-01-01",
      "intro": "",
      "description":"<ul><li>QTify is a song-browsing platform built from scratch using ReactJS paired with Material UI to deliver a seamless and aesthetic user interface.</li><li>Architected and utilized modular UI components including Buttons, Cards, and Carousels, optimizing for reusability across various sections of the application.</li><li>Implemented an intuitive genre-based filtering system using a tab component, allowing users to effortlessly browse songs by their preferred genre.</li><li>Augmented the search functionality with a suggestions dropdown, offering song recommendations as users input their search terms.</li></ul>",
      "track": "fdt",
    },
]